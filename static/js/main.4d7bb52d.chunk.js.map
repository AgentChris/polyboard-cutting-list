{"version":3,"sources":["TablePrint.jsx","App.js","serviceWorker.js","index.js"],"names":["TablePrint","className","Table","striped","bordered","this","props","table","sort","a","b","nameA","name","toUpperCase","nameB","map","tableLine","index","key","quantity","length","width","edgeText","React","Component","App","fileReader","componentRef","useRef","handlePrint","useReactToPrint","content","current","useState","setTable","handleFileRead","e","result","tableData","split","forEach","line","attributes","heightIsSmaller","parseFloat","topEdge","parseInt","bottomEdge","rightEdge","leftEdge","i","push","type","value","readOnly","onClick","event","target","focus","select","FormFile","id","label","custom","data-browse","onChange","file","files","FileReader","onloadend","readAsText","accept","Button","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d7bb52d.chunk.js","sourcesContent":["import React from 'react';\nimport { Table } from 'react-bootstrap';\n\nclass TablePrint extends React.Component {\n  render() {\n    return (\n      <div className=\"mt-3 px-5 mb-5\">\n        <h1>Masuratori mobila</h1>\n        <Table striped bordered>\n          <thead>\n          <tr>\n            <th>Nume si grosime</th>\n            <th>Cantitate</th>\n            <th>Lungime</th>\n            <th>Latime</th>\n            <th>Cant</th>\n          </tr>\n          </thead>\n          <tbody>\n          {this.props.table.sort((a,b)=>{\n            const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n            const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n            if (nameA < nameB) {\n              return -1;\n            }\n            if (nameA > nameB) {\n              return 1;\n            }\n\n            // names must be equal\n            return 0;\n          }).map((tableLine, index) => (\n            <tr key={index}>\n              <td>{tableLine.name}</td>\n              <td>{tableLine.quantity}</td>\n              <td>{tableLine.length}</td>\n              <td>{tableLine.width}</td>\n              <td>{tableLine.edgeText}</td>\n            </tr>\n          ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default TablePrint;\n","import React, { useRef, useState } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { Button, FormFile } from 'react-bootstrap';\nimport './main.scss';\nimport TablePrint from \"./TablePrint\";\n\nconst MATERIAL_INDEX = 0;\nconst QUANTITY_INDEX = 2;\nconst HEIGHT_INDEX = 3;\nconst WIDTH_INDEX = 4;\nconst TOP_EDGE_INDEX = 5;\nconst BOTTOM_EDGE_INDEX = 6;\nconst RIGHT_EDGE_INDEX = 7;\nconst LEFT_EDGE_INDEX = 8;\n\nfunction App() {\n  const componentRef = useRef();\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n  const [table, setTable] = useState();\n  let fileReader;\n\n  const handleFileRead = (e) => {\n    const content = fileReader.result;\n    const tableData = [];\n    content.split('\\n').forEach((line) => {\n      if (line) {\n        let attributes = line.split(';');\n        const heightIsSmaller = parseFloat(attributes[HEIGHT_INDEX]) < parseFloat(attributes[WIDTH_INDEX]);\n        let edgeText = '';\n\n        const topEdge = parseInt(attributes[TOP_EDGE_INDEX], 10);\n        const bottomEdge = parseInt(attributes[BOTTOM_EDGE_INDEX], 10);\n        const rightEdge = parseInt(attributes[RIGHT_EDGE_INDEX], 10);\n        const leftEdge = parseInt(attributes[LEFT_EDGE_INDEX], 10);\n        if (topEdge + bottomEdge + rightEdge + leftEdge===4) {\n          edgeText = 'roata';\n        } else {\n          for (let i = 0; i < topEdge + bottomEdge; i++) {\n            edgeText += heightIsSmaller ? 'lunga ':'scurta ';\n          }\n          for (let i = 0; i < rightEdge + leftEdge; i++) {\n            edgeText += heightIsSmaller ? 'scurta ':'lunga ';\n          }\n        }\n\n        tableData.push({\n          name: attributes[MATERIAL_INDEX],\n          quantity: attributes[QUANTITY_INDEX],\n          length: heightIsSmaller ? parseFloat(attributes[WIDTH_INDEX]):parseFloat(attributes[HEIGHT_INDEX]),\n          width: !heightIsSmaller ? parseFloat(attributes[WIDTH_INDEX]):parseFloat(attributes[HEIGHT_INDEX]),\n          edgeText: edgeText\n        });\n      }\n    });\n\n    setTable(tableData);\n  };\n\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n  return (\n    <div className=\"p-3\">\n      <h1>Exporta lista mobila formated according to Petre Jarda üë∑üèª‚Äç‚ôÇÔ∏èü™ëüí™</h1>\n      <h3>Pasul 1</h3>\n      <p>Copiaza urmatorul text in clipboard.</p>\n      <input type=\"text\" value=\"<material>;<quantity>;<height>;<width>;<top_edge_present>;\" readOnly\n             className=\"w-100\" onClick={(event)=>{\n               event.target.focus();event.target.select();\n      }}/><br />\n      <h3>Pasul 2</h3>\n      <p>Lipseste/Paste textul de mai sus conform imagini de mai jos</p>\n      <img />\n      <h3>Pasul 3</h3>\n      <p>Bifeza optiunea cu net dimension ca si in imaginea de mai sus si asigurate ca toate configuriatiile corespund\n      cu imaginea de mai sus</p>\n      <h3>Pasul 4</h3>\n      <p>Apasa pe ASCII export conform imagini de mai jos si decarca fisierul txt</p>\n      <h3>Pasul 5</h3>\n      <p>Adauga fisierul descarcat in casuta de mai jos</p>\n      <h3>Pasul final printeaza tabelul apasand pe butonul de mai jos</h3>\n      <FormFile\n        id=\"custom-file\"\n        label=\"Incarca fisierul txt\"\n        custom\n        data-browse=\"Incarca\"\n        className=\"w-50\"\n        onChange={event => handleFileChosen(event.target.files[0])} accept=\".txt\"\n      /><br />\n      <Button onClick={handlePrint} className=\"mt-4\">Printeaza tabel</Button><br />\n      {(table && table.length) ? <TablePrint table={table} ref={componentRef} />:'Nu ai incarcat niciun fisier'}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}